import groovy.json.JsonSlurper
import sun.rmi.runtime.Log

import java.security.MessageDigest
import java.security.NoSuchAlgorithmException
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream


public class MultipartUtility {

    private static final String CRLF = "\r\n";
    private static final String CHARSET = "UTF-8";

    private static final int CONNECT_TIMEOUT = 15000;
    private static final int READ_TIMEOUT = 10000;

    private final HttpURLConnection connection;
    private final OutputStream outputStream;
    private final PrintWriter writer;
    private final String boundary;

    // for log formatting only
    private final URL url;

    public MultipartUtility(final URL url, final String authorization) throws IOException {
        this.url = url;

        boundary = "---------------------------" ;

        connection = (HttpURLConnection) url.openConnection();
        connection.setConnectTimeout(CONNECT_TIMEOUT);
        connection.setReadTimeout(READ_TIMEOUT);
        connection.setRequestMethod("POST");
        if(authorization != null) {
            connection.setRequestProperty("Authorization", authorization);
        }
        connection.setRequestProperty("Accept-Charset", CHARSET);
        connection.setRequestProperty("Content-Type",
                "multipart/form-data; boundary=" + boundary);
        connection.setUseCaches(false);
        connection.setDoInput(true);
        connection.setDoOutput(true);

        outputStream = connection.getOutputStream();
        writer = new PrintWriter(new OutputStreamWriter(outputStream, CHARSET),
                true);
    }

    public void addFormField(final String name, final String value) {
        writer.append("--").append(boundary).append(CRLF)
                .append("Content-Disposition: form-data; name=\"").append(name)
                .append("\"").append(CRLF)
                .append("Content-Type: text/plain; charset=").append(CHARSET)
                .append(CRLF).append(CRLF).append(value).append(CRLF);
    }

    public void addFilePart(final String fieldName, final File uploadFile, final String contentType)
            throws IOException {
        final String fileName = uploadFile.getName();
        writer.append("--").append(boundary).append(CRLF)
                .append("Content-Disposition: form-data; name=\"")
                .append(fieldName).append("\"; filename=\"").append(fileName)
                .append("\"").append(CRLF).append("Content-Type: ")
                .append(contentType).append(CRLF)
                .append("Content-Transfer-Encoding: binary").append(CRLF)
                .append(CRLF);

        writer.flush();
        outputStream.flush();
        final FileInputStream inputStream = new FileInputStream(uploadFile)
        final byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
            outputStream.write(buffer, 0, bytesRead);
        }
        outputStream.flush();


        writer.append(CRLF);
    }

    public void addHeaderField(String name, String value) {
        writer.append(name).append(": ").append(value).append(CRLF);
    }

    public byte[] finish() throws IOException {
        writer.append(CRLF).append("--").append(boundary).append("--")
                .append(CRLF);
        writer.close();

        final int status = connection.getResponseCode();
        if (status != 200) {
            println("Status "+status)
        }

        final InputStream is = connection.getInputStream()
        final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        final byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = is.read(buffer)) != -1) {
            bytes.write(buffer, 0, bytesRead);
        }

        connection.disconnect();
        return bytes.toByteArray();

    }
}

class Zipper {

    private ZipOutputStream mZipFile;

    Zipper(String fileOutPutName) {
        mZipFile = new ZipOutputStream(new FileOutputStream(fileOutPutName))
    }

    void zip(String folderName) {
        println("[Zipper] - Start zip")
        zipInternal(new File(folderName), "")
        mZipFile.close()
        println("[Zipper] - End zip")
    }

    private zipInternal(File folder, String parentName) {
        if (!folder.exists()) {
            return
        }
        folder.eachFile() { file ->
            if (file.isDirectory()) {
                zipInternal(file, parentName + "/" + file.getName() + "/")
            } else {
                mZipFile.putNextEntry(new ZipEntry(parentName + file.getName()))
                def buffer = new byte[1024 * 8]
                file.withInputStream { i ->
                    def l = i.read(buffer)
                    // check wether the file is empty
                    if (l > 0) {
                        mZipFile.write(buffer, 0, l)
                    }
                }
                mZipFile.closeEntry()
            }
        }
    }
}

class SaveTestResultTask extends DefaultTask {

    private static final String CRLF = "\r\n";

    @Input
    def String mInputDirPath

    @Input
    def String mOutputZipFilePath

    @Input
    def String mPostUrl

    @Input
    def String mPostJsonAuthenticationFilePath

    @TaskAction
    def saveTest() {
        println("[ZipTestResult] - Start")
        new Zipper(mOutputZipFilePath).zip(mInputDirPath)
        println("[ZipTestResult] - End")

        println("[SendTestResult] - Start")
        postFile(mPostUrl, mPostJsonAuthenticationFilePath, mOutputZipFilePath)
        println("[SendTestResult] - End")
    }

    private static String convertToHex(byte[] data) {
        return data.encodeHex().toString();
    }

    public static String sha1(final String text) {
        println(text)
        if (text == null) {
            return null;
        }
        MessageDigest md;
        byte[] sha1hash = null;
        try {
            md = MessageDigest.getInstance("SHA-1");
            md.update(text.getBytes("iso-8859-1"), 0, text.length());
            sha1hash = md.digest();
        } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
            Log.e("HashUtils sha1", "NoSuchAlgorithmException or UnsupportedEncodingException", e);
        }
        return convertToHex(sha1hash);
    }

    public static String getUserToken(final String username, final String password) {
        final DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault());
        df.setTimeZone(TimeZone.getTimeZone("gmt"));
        final String currentDate = df.format(new Date());

        String authentication = String.format("%s:%s", username, sha1(sha1(password) + currentDate));
        return authentication.bytes.encodeBase64().toString();
    }

    static def postFile(
            final String postUrl,
            final String postJsonAuthenticationFilePath,
            final String outputZipFilePath) {

        final File jsonAuthenticationFile = new File(postJsonAuthenticationFilePath)
        if (!jsonAuthenticationFile.exists()) {
            println("postFile: json !exists")
            return
        }
        def json = new JsonSlurper().parseText(jsonAuthenticationFile.text)

        MultipartUtility connection = new MultipartUtility(new URL(postUrl), "Basic " + getUserToken(json.username, json.password));
        connection.addFilePart("file", new File(outputZipFilePath), "application/zip");
        println(connection.finish().toString());
    }
}

task saveTestResult(type: SaveTestResultTask) {
    mInputDirPath = "$buildDir/spoon-custom-report-dir/debug"
    mOutputZipFilePath = "$buildDir/spoon-custom-report-dir.zip"
    mPostUrl = "http://mercandalli.com/FileSpace-API/file"
    mPostJsonAuthenticationFilePath = "$rootDir/config/jenkins/authentication.json"
}

task jenkins(dependsOn: ['clean', 'spoon', 'saveTestResult']) {

}

task jenkinsunit(dependsOn: ['check', 'test']) {

}